lifecycle of a component object:(class component)

1. creation and mounting
   a. constructor: 
      initilaize class properties (such as state) with default values
      executed only once during the lifetime of the component object

      write ctor only when:
      i. you need to initialize the state
      ii. when you need to bind class methods/properties to the class instance context
      NOTE: if you use the alternates then there is no need to write the constructor explicitly

      NOTE:also DO NOT WRITE ANY SIDE EFFECT CAUSING CODE (such as fetching data from RESTFul API server application, making network requests, reading data from file asynchronously, or fetching data from database async way and then set state by calling setState method)

   b. getDerivedStateFromProps(newProps, previousState) [static]
      i. every time executed (first time after constructor and next time onwards first)
      NOTE: DO NOT WRITE ANY SIDE EFFECT CAUSING CODE (such as fetching data from RESTFul API server application, making network requests, reading data from file asynchronously, or fetching data from database async way and then set state by calling setState method)

   c. render --> render
      i. gets executed first time and afterwards everytime the state is updated through setState method
      ii. used to create react element of that component and it's child components (create VDOM part)
      NOTE: DO NOT WRITE ANY SIDE EFFECT CAUSING CODE (such as fetching data from RESTFul API server application, making network requests, reading data from file asynchronously, or fetching data from database async way and then set state by calling setState method) in render directly

   d. componentDidMount-->componentDidMount
     i. gets executed ONLY once in the lifecycle of the component object and that is when the component is created and corresponding react element is mounted in Actual DOM
     ii. NOTE: WRITE ANY SIDE EFFECT CAUSING CODE (such as fetching data from RESTFul API server application, making network requests, reading data from file asynchronously, or fetching data from database async way and then set state by calling setState method). that wil cause one more re-render ( to create fresh Virtual DOM again with updated state data)

2. updation:
   i.  state of the component is updated
   ii. the component receives new values via properties from parent (beacuse parent component state is updated)

   a. getDerivedStateFromProps(newProps, previousState)

   b. shouldComponentUpdate(newProps, newState):
      i. gets executed every time from 2nd cycle onwards
      ii. returns true or false to decide render and any other leifeccyle method followed after render should be executed or not
      iii. receives new props and new state object first. if the method returns true, THEN ONLY the "state" and "props" properties of class component instance are updated (NOT BEFORE)
      Use this stop unnecessary rendering
      NOTE: DO NOT WRITE ANY SIDE EFFECT CAUSING CODE (such as fetching data from RESTFul API server application, making network requests, reading data from file asynchronously, or fetching data from database async way and then set state by calling setState method)

   c. render

   d.  getSnapshotBeforeUpdate(oldProps, oldState):
     i. this function gets executed in case you need the component to retain old status quo such as, old scrollbar position etc. just before componentDidUpdate updates and state and re-renders the UI
    ii. gets executed everytime (except the first cycle) just before componentDidUpdate
    NOTE: DO NOT WRITE ANY SIDE EFFECT CAUSING CODE (such as fetching data from RESTFul API server application, making network requests, reading data from file asynchronously, or fetching data from database async way and then set state by calling setState method)

   e. componentDidUpdate(oldProps, oldState,snapshot):
      i.  this event gets fired in case you need this component react element to get updated
      ii. this event gets fired (this function gets executed) from 2nd cycle onwards (happens everytime), NOT the first cycle where componeht is created and mounted

   NOTE: WRITE ANY SIDE EFFECT CAUSING CODE (such as fetching data from RESTFul API server application, making network requests, reading data from file asynchronously, or fetching data from database async way and then set state by calling setState method). that wil cause one more re-render ( to create fresh Virtual DOM again with updated state data)
   

3. destruction
   a. componentWillUnmount:
      i.  We write resource clean up code here
      ii. this event gets fired (and the function gets executed) when the component's corresponding element is dismounted from Actual DOM and subsequently the component instance is destroyed
   
    NOTE: DO NOT WRITE ANY SIDE EFFECT CAUSING CODE (such as fetching data from RESTFul API server application, making network requests, reading data from file asynchronously, or fetching data from database async way and then set state by calling setState method).

4. error
   a. static getDerivedStateFromError(error):
     returns the a new state which should be used to set the state with error message
     gets executed before render and only when children throws error

   b. componentDidCatch(error, info):
     it gets executed after render. use it NOT TO SET STATE, but to log error

uncecessary rendering (render):
1. if a component state is updated then the component must be rendered, otherwise not
2. if the parent of this component state gets updated, then check the received property values changed since the last time or not. accordingly update


RESTFul API server application APIs:
base url: http://127.0.0.1:8081/productservice

METHOD					URL					RESPONSE
------------------------------------------------------------------------------------------------------
GET			http://127.0.0.1:8081/productservice			an array of products
GET			http://127.0.0.1:8081/productservice/{id}		a product object
DELETE			http://127.0.0.1:8081/productservice/{id}		an object with a message and array of products excluding the deleted product

POST			http://127.0.0.1:8081/productservice(product json data) an object with a message and array of products including the new product	

PUT			http://127.0.0.1:8081/productservice(product json data) an object with a message and array of products including the updated product		

download my application
open terminal (Node) and type: npm i
then execute the script: npm start






